/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface FeePoolListInterface extends ethers.utils.Interface {
  functions: {
    "addFeePool(tuple,uint24,uint24)": FunctionFragment;
    "addLiquidity(uint24,tuple)": FunctionFragment;
    "buy(uint256,uint256)": FunctionFragment;
    "deleteFeePool(uint24)": FunctionFragment;
    "get(uint24)": FunctionFragment;
    "highestFee()": FunctionFragment;
    "lowestFee()": FunctionFragment;
    "numberOfPools()": FunctionFragment;
    "pools(uint24)": FunctionFragment;
    "removeLiquidity(uint24)": FunctionFragment;
    "updateProtocolFee(uint24,uint24)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addFeePool",
    values: [
      {
        queue: string;
        factory: string;
        token: string;
        liquidity: BigNumberish;
        prevId: BigNumberish;
        nextId: BigNumberish;
        poolFeeX100000: BigNumberish;
        protocolFeeX100000: BigNumberish;
        numberOfPeopleInQueue: BigNumberish;
      },
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [
      BigNumberish,
      {
        owner: string;
        token: string;
        amount: BigNumberish;
        prev: string;
        next: string;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "buy",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteFeePool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "get", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "highestFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lowestFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "numberOfPools",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pools", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateProtocolFee",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addFeePool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deleteFeePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "get", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "highestFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lowestFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "numberOfPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pools", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateProtocolFee",
    data: BytesLike
  ): Result;

  events: {
    "AddFeePool(uint24,uint24,uint24,uint24)": EventFragment;
    "DeleteFeePool(uint24,uint24,uint24,uint24)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddFeePool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DeleteFeePool"): EventFragment;
}

export class FeePoolList extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: FeePoolListInterface;

  functions: {
    addFeePool(
      poolData: {
        queue: string;
        factory: string;
        token: string;
        liquidity: BigNumberish;
        prevId: BigNumberish;
        nextId: BigNumberish;
        poolFeeX100000: BigNumberish;
        protocolFeeX100000: BigNumberish;
        numberOfPeopleInQueue: BigNumberish;
      },
      prevId: BigNumberish,
      nextId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addFeePool((address,address,address,uint256,uint24,uint24,uint24,uint24,uint24),uint24,uint24)"(
      poolData: {
        queue: string;
        factory: string;
        token: string;
        liquidity: BigNumberish;
        prevId: BigNumberish;
        nextId: BigNumberish;
        poolFeeX100000: BigNumberish;
        protocolFeeX100000: BigNumberish;
        numberOfPeopleInQueue: BigNumberish;
      },
      prevId: BigNumberish,
      nextId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addLiquidity(
      fee: BigNumberish,
      data: {
        owner: string;
        token: string;
        amount: BigNumberish;
        prev: string;
        next: string;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addLiquidity(uint24,(address,address,uint256,address,address))"(
      fee: BigNumberish,
      data: {
        owner: string;
        token: string;
        amount: BigNumberish;
        prev: string;
        next: string;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    buy(
      amount: BigNumberish,
      rateX100000: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "buy(uint256,uint256)"(
      amount: BigNumberish,
      rateX100000: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    deleteFeePool(
      poolFeeX100000: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deleteFeePool(uint24)"(
      poolFeeX100000: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    get(
      fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        queue: string;
        factory: string;
        token: string;
        liquidity: BigNumber;
        prevId: number;
        nextId: number;
        poolFeeX100000: number;
        protocolFeeX100000: number;
        numberOfPeopleInQueue: number;
        0: string;
        1: string;
        2: string;
        3: BigNumber;
        4: number;
        5: number;
        6: number;
        7: number;
        8: number;
      };
    }>;

    "get(uint24)"(
      fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        queue: string;
        factory: string;
        token: string;
        liquidity: BigNumber;
        prevId: number;
        nextId: number;
        poolFeeX100000: number;
        protocolFeeX100000: number;
        numberOfPeopleInQueue: number;
        0: string;
        1: string;
        2: string;
        3: BigNumber;
        4: number;
        5: number;
        6: number;
        7: number;
        8: number;
      };
    }>;

    highestFee(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    "highestFee()"(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    lowestFee(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    "lowestFee()"(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    numberOfPools(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    "numberOfPools()"(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    pools(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      queue: string;
      factory: string;
      token: string;
      liquidity: BigNumber;
      prevId: number;
      nextId: number;
      poolFeeX100000: number;
      protocolFeeX100000: number;
      numberOfPeopleInQueue: number;
      0: string;
      1: string;
      2: string;
      3: BigNumber;
      4: number;
      5: number;
      6: number;
      7: number;
      8: number;
    }>;

    "pools(uint24)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      queue: string;
      factory: string;
      token: string;
      liquidity: BigNumber;
      prevId: number;
      nextId: number;
      poolFeeX100000: number;
      protocolFeeX100000: number;
      numberOfPeopleInQueue: number;
      0: string;
      1: string;
      2: string;
      3: BigNumber;
      4: number;
      5: number;
      6: number;
      7: number;
      8: number;
    }>;

    removeLiquidity(
      fee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeLiquidity(uint24)"(
      fee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateProtocolFee(
      poolFeeX100000: BigNumberish,
      protocolFeeX100000: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateProtocolFee(uint24,uint24)"(
      poolFeeX100000: BigNumberish,
      protocolFeeX100000: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  addFeePool(
    poolData: {
      queue: string;
      factory: string;
      token: string;
      liquidity: BigNumberish;
      prevId: BigNumberish;
      nextId: BigNumberish;
      poolFeeX100000: BigNumberish;
      protocolFeeX100000: BigNumberish;
      numberOfPeopleInQueue: BigNumberish;
    },
    prevId: BigNumberish,
    nextId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addFeePool((address,address,address,uint256,uint24,uint24,uint24,uint24,uint24),uint24,uint24)"(
    poolData: {
      queue: string;
      factory: string;
      token: string;
      liquidity: BigNumberish;
      prevId: BigNumberish;
      nextId: BigNumberish;
      poolFeeX100000: BigNumberish;
      protocolFeeX100000: BigNumberish;
      numberOfPeopleInQueue: BigNumberish;
    },
    prevId: BigNumberish,
    nextId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addLiquidity(
    fee: BigNumberish,
    data: {
      owner: string;
      token: string;
      amount: BigNumberish;
      prev: string;
      next: string;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addLiquidity(uint24,(address,address,uint256,address,address))"(
    fee: BigNumberish,
    data: {
      owner: string;
      token: string;
      amount: BigNumberish;
      prev: string;
      next: string;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  buy(
    amount: BigNumberish,
    rateX100000: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "buy(uint256,uint256)"(
    amount: BigNumberish,
    rateX100000: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  deleteFeePool(
    poolFeeX100000: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deleteFeePool(uint24)"(
    poolFeeX100000: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  get(
    fee: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    queue: string;
    factory: string;
    token: string;
    liquidity: BigNumber;
    prevId: number;
    nextId: number;
    poolFeeX100000: number;
    protocolFeeX100000: number;
    numberOfPeopleInQueue: number;
    0: string;
    1: string;
    2: string;
    3: BigNumber;
    4: number;
    5: number;
    6: number;
    7: number;
    8: number;
  }>;

  "get(uint24)"(
    fee: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    queue: string;
    factory: string;
    token: string;
    liquidity: BigNumber;
    prevId: number;
    nextId: number;
    poolFeeX100000: number;
    protocolFeeX100000: number;
    numberOfPeopleInQueue: number;
    0: string;
    1: string;
    2: string;
    3: BigNumber;
    4: number;
    5: number;
    6: number;
    7: number;
    8: number;
  }>;

  highestFee(overrides?: CallOverrides): Promise<number>;

  "highestFee()"(overrides?: CallOverrides): Promise<number>;

  lowestFee(overrides?: CallOverrides): Promise<number>;

  "lowestFee()"(overrides?: CallOverrides): Promise<number>;

  numberOfPools(overrides?: CallOverrides): Promise<number>;

  "numberOfPools()"(overrides?: CallOverrides): Promise<number>;

  pools(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    queue: string;
    factory: string;
    token: string;
    liquidity: BigNumber;
    prevId: number;
    nextId: number;
    poolFeeX100000: number;
    protocolFeeX100000: number;
    numberOfPeopleInQueue: number;
    0: string;
    1: string;
    2: string;
    3: BigNumber;
    4: number;
    5: number;
    6: number;
    7: number;
    8: number;
  }>;

  "pools(uint24)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    queue: string;
    factory: string;
    token: string;
    liquidity: BigNumber;
    prevId: number;
    nextId: number;
    poolFeeX100000: number;
    protocolFeeX100000: number;
    numberOfPeopleInQueue: number;
    0: string;
    1: string;
    2: string;
    3: BigNumber;
    4: number;
    5: number;
    6: number;
    7: number;
    8: number;
  }>;

  removeLiquidity(
    fee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeLiquidity(uint24)"(
    fee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateProtocolFee(
    poolFeeX100000: BigNumberish,
    protocolFeeX100000: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateProtocolFee(uint24,uint24)"(
    poolFeeX100000: BigNumberish,
    protocolFeeX100000: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    addFeePool(
      poolData: {
        queue: string;
        factory: string;
        token: string;
        liquidity: BigNumberish;
        prevId: BigNumberish;
        nextId: BigNumberish;
        poolFeeX100000: BigNumberish;
        protocolFeeX100000: BigNumberish;
        numberOfPeopleInQueue: BigNumberish;
      },
      prevId: BigNumberish,
      nextId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "addFeePool((address,address,address,uint256,uint24,uint24,uint24,uint24,uint24),uint24,uint24)"(
      poolData: {
        queue: string;
        factory: string;
        token: string;
        liquidity: BigNumberish;
        prevId: BigNumberish;
        nextId: BigNumberish;
        poolFeeX100000: BigNumberish;
        protocolFeeX100000: BigNumberish;
        numberOfPeopleInQueue: BigNumberish;
      },
      prevId: BigNumberish,
      nextId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addLiquidity(
      fee: BigNumberish,
      data: {
        owner: string;
        token: string;
        amount: BigNumberish;
        prev: string;
        next: string;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "addLiquidity(uint24,(address,address,uint256,address,address))"(
      fee: BigNumberish,
      data: {
        owner: string;
        token: string;
        amount: BigNumberish;
        prev: string;
        next: string;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    buy(
      amount: BigNumberish,
      rateX100000: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      amountBought: BigNumber;
      convertedAmount: BigNumber;
      totalProtocolFees: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    "buy(uint256,uint256)"(
      amount: BigNumberish,
      rateX100000: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      amountBought: BigNumber;
      convertedAmount: BigNumber;
      totalProtocolFees: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    deleteFeePool(
      poolFeeX100000: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "deleteFeePool(uint24)"(
      poolFeeX100000: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    get(
      fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      queue: string;
      factory: string;
      token: string;
      liquidity: BigNumber;
      prevId: number;
      nextId: number;
      poolFeeX100000: number;
      protocolFeeX100000: number;
      numberOfPeopleInQueue: number;
      0: string;
      1: string;
      2: string;
      3: BigNumber;
      4: number;
      5: number;
      6: number;
      7: number;
      8: number;
    }>;

    "get(uint24)"(
      fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      queue: string;
      factory: string;
      token: string;
      liquidity: BigNumber;
      prevId: number;
      nextId: number;
      poolFeeX100000: number;
      protocolFeeX100000: number;
      numberOfPeopleInQueue: number;
      0: string;
      1: string;
      2: string;
      3: BigNumber;
      4: number;
      5: number;
      6: number;
      7: number;
      8: number;
    }>;

    highestFee(overrides?: CallOverrides): Promise<number>;

    "highestFee()"(overrides?: CallOverrides): Promise<number>;

    lowestFee(overrides?: CallOverrides): Promise<number>;

    "lowestFee()"(overrides?: CallOverrides): Promise<number>;

    numberOfPools(overrides?: CallOverrides): Promise<number>;

    "numberOfPools()"(overrides?: CallOverrides): Promise<number>;

    pools(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      queue: string;
      factory: string;
      token: string;
      liquidity: BigNumber;
      prevId: number;
      nextId: number;
      poolFeeX100000: number;
      protocolFeeX100000: number;
      numberOfPeopleInQueue: number;
      0: string;
      1: string;
      2: string;
      3: BigNumber;
      4: number;
      5: number;
      6: number;
      7: number;
      8: number;
    }>;

    "pools(uint24)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      queue: string;
      factory: string;
      token: string;
      liquidity: BigNumber;
      prevId: number;
      nextId: number;
      poolFeeX100000: number;
      protocolFeeX100000: number;
      numberOfPeopleInQueue: number;
      0: string;
      1: string;
      2: string;
      3: BigNumber;
      4: number;
      5: number;
      6: number;
      7: number;
      8: number;
    }>;

    removeLiquidity(
      fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeLiquidity(uint24)"(
      fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateProtocolFee(
      poolFeeX100000: BigNumberish,
      protocolFeeX100000: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateProtocolFee(uint24,uint24)"(
      poolFeeX100000: BigNumberish,
      protocolFeeX100000: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AddFeePool(
      prevId: null,
      poolFeeX100000: null,
      nextId: null,
      protocolFeeX100000: null
    ): EventFilter;

    DeleteFeePool(
      prevId: null,
      poolFeeX100000: null,
      nextId: null,
      protocolFeeX100000: null
    ): EventFilter;
  };

  estimateGas: {
    addFeePool(
      poolData: {
        queue: string;
        factory: string;
        token: string;
        liquidity: BigNumberish;
        prevId: BigNumberish;
        nextId: BigNumberish;
        poolFeeX100000: BigNumberish;
        protocolFeeX100000: BigNumberish;
        numberOfPeopleInQueue: BigNumberish;
      },
      prevId: BigNumberish,
      nextId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addFeePool((address,address,address,uint256,uint24,uint24,uint24,uint24,uint24),uint24,uint24)"(
      poolData: {
        queue: string;
        factory: string;
        token: string;
        liquidity: BigNumberish;
        prevId: BigNumberish;
        nextId: BigNumberish;
        poolFeeX100000: BigNumberish;
        protocolFeeX100000: BigNumberish;
        numberOfPeopleInQueue: BigNumberish;
      },
      prevId: BigNumberish,
      nextId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addLiquidity(
      fee: BigNumberish,
      data: {
        owner: string;
        token: string;
        amount: BigNumberish;
        prev: string;
        next: string;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addLiquidity(uint24,(address,address,uint256,address,address))"(
      fee: BigNumberish,
      data: {
        owner: string;
        token: string;
        amount: BigNumberish;
        prev: string;
        next: string;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    buy(
      amount: BigNumberish,
      rateX100000: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "buy(uint256,uint256)"(
      amount: BigNumberish,
      rateX100000: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    deleteFeePool(
      poolFeeX100000: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "deleteFeePool(uint24)"(
      poolFeeX100000: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    get(fee: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "get(uint24)"(
      fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    highestFee(overrides?: CallOverrides): Promise<BigNumber>;

    "highestFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    lowestFee(overrides?: CallOverrides): Promise<BigNumber>;

    "lowestFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    numberOfPools(overrides?: CallOverrides): Promise<BigNumber>;

    "numberOfPools()"(overrides?: CallOverrides): Promise<BigNumber>;

    pools(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "pools(uint24)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeLiquidity(
      fee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeLiquidity(uint24)"(
      fee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateProtocolFee(
      poolFeeX100000: BigNumberish,
      protocolFeeX100000: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateProtocolFee(uint24,uint24)"(
      poolFeeX100000: BigNumberish,
      protocolFeeX100000: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addFeePool(
      poolData: {
        queue: string;
        factory: string;
        token: string;
        liquidity: BigNumberish;
        prevId: BigNumberish;
        nextId: BigNumberish;
        poolFeeX100000: BigNumberish;
        protocolFeeX100000: BigNumberish;
        numberOfPeopleInQueue: BigNumberish;
      },
      prevId: BigNumberish,
      nextId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addFeePool((address,address,address,uint256,uint24,uint24,uint24,uint24,uint24),uint24,uint24)"(
      poolData: {
        queue: string;
        factory: string;
        token: string;
        liquidity: BigNumberish;
        prevId: BigNumberish;
        nextId: BigNumberish;
        poolFeeX100000: BigNumberish;
        protocolFeeX100000: BigNumberish;
        numberOfPeopleInQueue: BigNumberish;
      },
      prevId: BigNumberish,
      nextId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addLiquidity(
      fee: BigNumberish,
      data: {
        owner: string;
        token: string;
        amount: BigNumberish;
        prev: string;
        next: string;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addLiquidity(uint24,(address,address,uint256,address,address))"(
      fee: BigNumberish,
      data: {
        owner: string;
        token: string;
        amount: BigNumberish;
        prev: string;
        next: string;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    buy(
      amount: BigNumberish,
      rateX100000: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "buy(uint256,uint256)"(
      amount: BigNumberish,
      rateX100000: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    deleteFeePool(
      poolFeeX100000: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deleteFeePool(uint24)"(
      poolFeeX100000: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    get(
      fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "get(uint24)"(
      fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    highestFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "highestFee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lowestFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lowestFee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numberOfPools(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "numberOfPools()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pools(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pools(uint24)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeLiquidity(
      fee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeLiquidity(uint24)"(
      fee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateProtocolFee(
      poolFeeX100000: BigNumberish,
      protocolFeeX100000: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateProtocolFee(uint24,uint24)"(
      poolFeeX100000: BigNumberish,
      protocolFeeX100000: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
