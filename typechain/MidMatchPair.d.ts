/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface MidMatchPairInterface extends ethers.utils.Interface {
  functions: {
    "addFeePool(address,uint24,uint24,uint24,uint24)": FunctionFragment;
    "addLiquidity(address,uint256,uint24)": FunctionFragment;
    "buyTokens(uint256,address,uint256,address)": FunctionFragment;
    "exitQueue(uint24,address)": FunctionFragment;
    "getQueueForFeePool(address,uint24)": FunctionFragment;
    "getRate()": FunctionFragment;
    "getRateForAmount(address,uint256)": FunctionFragment;
    "getUniswapReserver()": FunctionFragment;
    "withdraw(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addFeePool",
    values: [string, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyTokens",
    values: [BigNumberish, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "exitQueue",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getQueueForFeePool",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getRate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getRateForAmount",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUniswapReserver",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values: [string]): string;

  decodeFunctionResult(functionFragment: "addFeePool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyTokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exitQueue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getQueueForFeePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRateForAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUniswapReserver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {};
}

export class MidMatchPair extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: MidMatchPairInterface;

  functions: {
    addFeePool(
      token: string,
      poolFee: BigNumberish,
      protocolFee: BigNumberish,
      prevFee: BigNumberish,
      nextFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addFeePool(address,uint24,uint24,uint24,uint24)"(
      token: string,
      poolFee: BigNumberish,
      protocolFee: BigNumberish,
      prevFee: BigNumberish,
      nextFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addLiquidity(
      token: string,
      amount: BigNumberish,
      fee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addLiquidity(address,uint256,uint24)"(
      token: string,
      amount: BigNumberish,
      fee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    buyTokens(
      amountToBuy: BigNumberish,
      tokenToBuy: string,
      amountToSwap: BigNumberish,
      tokenToSell: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "buyTokens(uint256,address,uint256,address)"(
      amountToBuy: BigNumberish,
      tokenToBuy: string,
      amountToSwap: BigNumberish,
      tokenToSell: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    exitQueue(
      fee: BigNumberish,
      token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "exitQueue(uint24,address)"(
      fee: BigNumberish,
      token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getQueueForFeePool(
      token: string,
      fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      queue: string;
      0: string;
    }>;

    "getQueueForFeePool(address,uint24)"(
      token: string,
      fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      queue: string;
      0: string;
    }>;

    getRate(overrides?: CallOverrides): Promise<{
      rate: BigNumber;
      0: BigNumber;
    }>;

    "getRate()"(overrides?: CallOverrides): Promise<{
      rate: BigNumber;
      0: BigNumber;
    }>;

    getRateForAmount(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      rate: BigNumber;
      0: BigNumber;
    }>;

    "getRateForAmount(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      rate: BigNumber;
      0: BigNumber;
    }>;

    getUniswapReserver(overrides?: CallOverrides): Promise<{
      reserve0: BigNumber;
      reserve1: BigNumber;
      timestamp: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    "getUniswapReserver()"(overrides?: CallOverrides): Promise<{
      reserve0: BigNumber;
      reserve1: BigNumber;
      timestamp: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    withdraw(
      token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdraw(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  addFeePool(
    token: string,
    poolFee: BigNumberish,
    protocolFee: BigNumberish,
    prevFee: BigNumberish,
    nextFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addFeePool(address,uint24,uint24,uint24,uint24)"(
    token: string,
    poolFee: BigNumberish,
    protocolFee: BigNumberish,
    prevFee: BigNumberish,
    nextFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addLiquidity(
    token: string,
    amount: BigNumberish,
    fee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addLiquidity(address,uint256,uint24)"(
    token: string,
    amount: BigNumberish,
    fee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  buyTokens(
    amountToBuy: BigNumberish,
    tokenToBuy: string,
    amountToSwap: BigNumberish,
    tokenToSell: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "buyTokens(uint256,address,uint256,address)"(
    amountToBuy: BigNumberish,
    tokenToBuy: string,
    amountToSwap: BigNumberish,
    tokenToSell: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  exitQueue(
    fee: BigNumberish,
    token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "exitQueue(uint24,address)"(
    fee: BigNumberish,
    token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getQueueForFeePool(
    token: string,
    fee: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getQueueForFeePool(address,uint24)"(
    token: string,
    fee: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getRate(overrides?: CallOverrides): Promise<BigNumber>;

  "getRate()"(overrides?: CallOverrides): Promise<BigNumber>;

  getRateForAmount(
    token: string,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getRateForAmount(address,uint256)"(
    token: string,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUniswapReserver(overrides?: CallOverrides): Promise<{
    reserve0: BigNumber;
    reserve1: BigNumber;
    timestamp: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
  }>;

  "getUniswapReserver()"(overrides?: CallOverrides): Promise<{
    reserve0: BigNumber;
    reserve1: BigNumber;
    timestamp: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
  }>;

  withdraw(token: string, overrides?: Overrides): Promise<ContractTransaction>;

  "withdraw(address)"(
    token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    addFeePool(
      token: string,
      poolFee: BigNumberish,
      protocolFee: BigNumberish,
      prevFee: BigNumberish,
      nextFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "addFeePool(address,uint24,uint24,uint24,uint24)"(
      token: string,
      poolFee: BigNumberish,
      protocolFee: BigNumberish,
      prevFee: BigNumberish,
      nextFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addLiquidity(
      token: string,
      amount: BigNumberish,
      fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "addLiquidity(address,uint256,uint24)"(
      token: string,
      amount: BigNumberish,
      fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyTokens(
      amountToBuy: BigNumberish,
      tokenToBuy: string,
      amountToSwap: BigNumberish,
      tokenToSell: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "buyTokens(uint256,address,uint256,address)"(
      amountToBuy: BigNumberish,
      tokenToBuy: string,
      amountToSwap: BigNumberish,
      tokenToSell: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    exitQueue(
      fee: BigNumberish,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "exitQueue(uint24,address)"(
      fee: BigNumberish,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getQueueForFeePool(
      token: string,
      fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getQueueForFeePool(address,uint24)"(
      token: string,
      fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRate(overrides?: CallOverrides): Promise<BigNumber>;

    "getRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    getRateForAmount(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRateForAmount(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUniswapReserver(overrides?: CallOverrides): Promise<{
      reserve0: BigNumber;
      reserve1: BigNumber;
      timestamp: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    "getUniswapReserver()"(overrides?: CallOverrides): Promise<{
      reserve0: BigNumber;
      reserve1: BigNumber;
      timestamp: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    withdraw(token: string, overrides?: CallOverrides): Promise<void>;

    "withdraw(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    addFeePool(
      token: string,
      poolFee: BigNumberish,
      protocolFee: BigNumberish,
      prevFee: BigNumberish,
      nextFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addFeePool(address,uint24,uint24,uint24,uint24)"(
      token: string,
      poolFee: BigNumberish,
      protocolFee: BigNumberish,
      prevFee: BigNumberish,
      nextFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addLiquidity(
      token: string,
      amount: BigNumberish,
      fee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addLiquidity(address,uint256,uint24)"(
      token: string,
      amount: BigNumberish,
      fee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    buyTokens(
      amountToBuy: BigNumberish,
      tokenToBuy: string,
      amountToSwap: BigNumberish,
      tokenToSell: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "buyTokens(uint256,address,uint256,address)"(
      amountToBuy: BigNumberish,
      tokenToBuy: string,
      amountToSwap: BigNumberish,
      tokenToSell: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    exitQueue(
      fee: BigNumberish,
      token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "exitQueue(uint24,address)"(
      fee: BigNumberish,
      token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getQueueForFeePool(
      token: string,
      fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getQueueForFeePool(address,uint24)"(
      token: string,
      fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRate(overrides?: CallOverrides): Promise<BigNumber>;

    "getRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    getRateForAmount(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRateForAmount(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUniswapReserver(overrides?: CallOverrides): Promise<BigNumber>;

    "getUniswapReserver()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(token: string, overrides?: Overrides): Promise<BigNumber>;

    "withdraw(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addFeePool(
      token: string,
      poolFee: BigNumberish,
      protocolFee: BigNumberish,
      prevFee: BigNumberish,
      nextFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addFeePool(address,uint24,uint24,uint24,uint24)"(
      token: string,
      poolFee: BigNumberish,
      protocolFee: BigNumberish,
      prevFee: BigNumberish,
      nextFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addLiquidity(
      token: string,
      amount: BigNumberish,
      fee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addLiquidity(address,uint256,uint24)"(
      token: string,
      amount: BigNumberish,
      fee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    buyTokens(
      amountToBuy: BigNumberish,
      tokenToBuy: string,
      amountToSwap: BigNumberish,
      tokenToSell: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "buyTokens(uint256,address,uint256,address)"(
      amountToBuy: BigNumberish,
      tokenToBuy: string,
      amountToSwap: BigNumberish,
      tokenToSell: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    exitQueue(
      fee: BigNumberish,
      token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "exitQueue(uint24,address)"(
      fee: BigNumberish,
      token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getQueueForFeePool(
      token: string,
      fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getQueueForFeePool(address,uint24)"(
      token: string,
      fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getRate()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRateForAmount(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRateForAmount(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUniswapReserver(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUniswapReserver()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdraw(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
