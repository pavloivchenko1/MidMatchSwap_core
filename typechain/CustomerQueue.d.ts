/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface CustomerQueueInterface extends ethers.utils.Interface {
  functions: {
    "deleteFirst()": FunctionFragment;
    "deleteFromQueue(address)": FunctionFragment;
    "dequeue()": FunctionFragment;
    "enqueue(tuple)": FunctionFragment;
    "getFirst()": FunctionFragment;
    "numberOfPeopleInQueue()": FunctionFragment;
    "updateBalance(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "deleteFirst",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deleteFromQueue",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "dequeue", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "enqueue",
    values: [
      {
        owner: string;
        token: string;
        amount: BigNumberish;
        prev: string;
        next: string;
      }
    ]
  ): string;
  encodeFunctionData(functionFragment: "getFirst", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "numberOfPeopleInQueue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateBalance",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "deleteFirst",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteFromQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dequeue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "enqueue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getFirst", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "numberOfPeopleInQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBalance",
    data: BytesLike
  ): Result;

  events: {};
}

export class CustomerQueue extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: CustomerQueueInterface;

  functions: {
    deleteFirst(overrides?: Overrides): Promise<ContractTransaction>;

    "deleteFirst()"(overrides?: Overrides): Promise<ContractTransaction>;

    deleteFromQueue(
      owner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deleteFromQueue(address)"(
      owner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    dequeue(overrides?: Overrides): Promise<ContractTransaction>;

    "dequeue()"(overrides?: Overrides): Promise<ContractTransaction>;

    enqueue(
      data: {
        owner: string;
        token: string;
        amount: BigNumberish;
        prev: string;
        next: string;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "enqueue((address,address,uint256,address,address))"(
      data: {
        owner: string;
        token: string;
        amount: BigNumberish;
        prev: string;
        next: string;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getFirst(overrides?: CallOverrides): Promise<{
      data: {
        owner: string;
        token: string;
        amount: BigNumber;
        prev: string;
        next: string;
        0: string;
        1: string;
        2: BigNumber;
        3: string;
        4: string;
      };
      index: string;
      0: {
        owner: string;
        token: string;
        amount: BigNumber;
        prev: string;
        next: string;
        0: string;
        1: string;
        2: BigNumber;
        3: string;
        4: string;
      };
      1: string;
    }>;

    "getFirst()"(overrides?: CallOverrides): Promise<{
      data: {
        owner: string;
        token: string;
        amount: BigNumber;
        prev: string;
        next: string;
        0: string;
        1: string;
        2: BigNumber;
        3: string;
        4: string;
      };
      index: string;
      0: {
        owner: string;
        token: string;
        amount: BigNumber;
        prev: string;
        next: string;
        0: string;
        1: string;
        2: BigNumber;
        3: string;
        4: string;
      };
      1: string;
    }>;

    numberOfPeopleInQueue(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    "numberOfPeopleInQueue()"(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    updateBalance(
      owner: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateBalance(address,uint256)"(
      owner: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  deleteFirst(overrides?: Overrides): Promise<ContractTransaction>;

  "deleteFirst()"(overrides?: Overrides): Promise<ContractTransaction>;

  deleteFromQueue(
    owner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deleteFromQueue(address)"(
    owner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  dequeue(overrides?: Overrides): Promise<ContractTransaction>;

  "dequeue()"(overrides?: Overrides): Promise<ContractTransaction>;

  enqueue(
    data: {
      owner: string;
      token: string;
      amount: BigNumberish;
      prev: string;
      next: string;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "enqueue((address,address,uint256,address,address))"(
    data: {
      owner: string;
      token: string;
      amount: BigNumberish;
      prev: string;
      next: string;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getFirst(overrides?: CallOverrides): Promise<{
    data: {
      owner: string;
      token: string;
      amount: BigNumber;
      prev: string;
      next: string;
      0: string;
      1: string;
      2: BigNumber;
      3: string;
      4: string;
    };
    index: string;
    0: {
      owner: string;
      token: string;
      amount: BigNumber;
      prev: string;
      next: string;
      0: string;
      1: string;
      2: BigNumber;
      3: string;
      4: string;
    };
    1: string;
  }>;

  "getFirst()"(overrides?: CallOverrides): Promise<{
    data: {
      owner: string;
      token: string;
      amount: BigNumber;
      prev: string;
      next: string;
      0: string;
      1: string;
      2: BigNumber;
      3: string;
      4: string;
    };
    index: string;
    0: {
      owner: string;
      token: string;
      amount: BigNumber;
      prev: string;
      next: string;
      0: string;
      1: string;
      2: BigNumber;
      3: string;
      4: string;
    };
    1: string;
  }>;

  numberOfPeopleInQueue(overrides?: CallOverrides): Promise<number>;

  "numberOfPeopleInQueue()"(overrides?: CallOverrides): Promise<number>;

  updateBalance(
    owner: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateBalance(address,uint256)"(
    owner: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    deleteFirst(overrides?: CallOverrides): Promise<void>;

    "deleteFirst()"(overrides?: CallOverrides): Promise<void>;

    deleteFromQueue(
      owner: string,
      overrides?: CallOverrides
    ): Promise<{
      owner: string;
      token: string;
      amount: BigNumber;
      prev: string;
      next: string;
      0: string;
      1: string;
      2: BigNumber;
      3: string;
      4: string;
    }>;

    "deleteFromQueue(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<{
      owner: string;
      token: string;
      amount: BigNumber;
      prev: string;
      next: string;
      0: string;
      1: string;
      2: BigNumber;
      3: string;
      4: string;
    }>;

    dequeue(overrides?: CallOverrides): Promise<{
      data: {
        owner: string;
        token: string;
        amount: BigNumber;
        prev: string;
        next: string;
        0: string;
        1: string;
        2: BigNumber;
        3: string;
        4: string;
      };
      nextAddress: string;
      0: {
        owner: string;
        token: string;
        amount: BigNumber;
        prev: string;
        next: string;
        0: string;
        1: string;
        2: BigNumber;
        3: string;
        4: string;
      };
      1: string;
    }>;

    "dequeue()"(overrides?: CallOverrides): Promise<{
      data: {
        owner: string;
        token: string;
        amount: BigNumber;
        prev: string;
        next: string;
        0: string;
        1: string;
        2: BigNumber;
        3: string;
        4: string;
      };
      nextAddress: string;
      0: {
        owner: string;
        token: string;
        amount: BigNumber;
        prev: string;
        next: string;
        0: string;
        1: string;
        2: BigNumber;
        3: string;
        4: string;
      };
      1: string;
    }>;

    enqueue(
      data: {
        owner: string;
        token: string;
        amount: BigNumberish;
        prev: string;
        next: string;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    "enqueue((address,address,uint256,address,address))"(
      data: {
        owner: string;
        token: string;
        amount: BigNumberish;
        prev: string;
        next: string;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    getFirst(overrides?: CallOverrides): Promise<{
      data: {
        owner: string;
        token: string;
        amount: BigNumber;
        prev: string;
        next: string;
        0: string;
        1: string;
        2: BigNumber;
        3: string;
        4: string;
      };
      index: string;
      0: {
        owner: string;
        token: string;
        amount: BigNumber;
        prev: string;
        next: string;
        0: string;
        1: string;
        2: BigNumber;
        3: string;
        4: string;
      };
      1: string;
    }>;

    "getFirst()"(overrides?: CallOverrides): Promise<{
      data: {
        owner: string;
        token: string;
        amount: BigNumber;
        prev: string;
        next: string;
        0: string;
        1: string;
        2: BigNumber;
        3: string;
        4: string;
      };
      index: string;
      0: {
        owner: string;
        token: string;
        amount: BigNumber;
        prev: string;
        next: string;
        0: string;
        1: string;
        2: BigNumber;
        3: string;
        4: string;
      };
      1: string;
    }>;

    numberOfPeopleInQueue(overrides?: CallOverrides): Promise<number>;

    "numberOfPeopleInQueue()"(overrides?: CallOverrides): Promise<number>;

    updateBalance(
      owner: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateBalance(address,uint256)"(
      owner: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    deleteFirst(overrides?: Overrides): Promise<BigNumber>;

    "deleteFirst()"(overrides?: Overrides): Promise<BigNumber>;

    deleteFromQueue(owner: string, overrides?: Overrides): Promise<BigNumber>;

    "deleteFromQueue(address)"(
      owner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    dequeue(overrides?: Overrides): Promise<BigNumber>;

    "dequeue()"(overrides?: Overrides): Promise<BigNumber>;

    enqueue(
      data: {
        owner: string;
        token: string;
        amount: BigNumberish;
        prev: string;
        next: string;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "enqueue((address,address,uint256,address,address))"(
      data: {
        owner: string;
        token: string;
        amount: BigNumberish;
        prev: string;
        next: string;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    getFirst(overrides?: CallOverrides): Promise<BigNumber>;

    "getFirst()"(overrides?: CallOverrides): Promise<BigNumber>;

    numberOfPeopleInQueue(overrides?: CallOverrides): Promise<BigNumber>;

    "numberOfPeopleInQueue()"(overrides?: CallOverrides): Promise<BigNumber>;

    updateBalance(
      owner: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateBalance(address,uint256)"(
      owner: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    deleteFirst(overrides?: Overrides): Promise<PopulatedTransaction>;

    "deleteFirst()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    deleteFromQueue(
      owner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deleteFromQueue(address)"(
      owner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    dequeue(overrides?: Overrides): Promise<PopulatedTransaction>;

    "dequeue()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    enqueue(
      data: {
        owner: string;
        token: string;
        amount: BigNumberish;
        prev: string;
        next: string;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "enqueue((address,address,uint256,address,address))"(
      data: {
        owner: string;
        token: string;
        amount: BigNumberish;
        prev: string;
        next: string;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getFirst(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getFirst()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numberOfPeopleInQueue(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "numberOfPeopleInQueue()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateBalance(
      owner: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateBalance(address,uint256)"(
      owner: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
